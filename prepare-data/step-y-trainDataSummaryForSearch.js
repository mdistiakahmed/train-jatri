import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Directory containing the train data files
const trainDataDir = path.join(__dirname, 'Final_train_data');
// Output file path
const outputFile = path.join(__dirname, '..', 'src', 'trainDataSummary.ts');

// Ensure the output directory exists
const outputDir = path.dirname(outputFile);
if (!fs.existsSync(outputDir)) {
  fs.mkdirSync(outputDir, { recursive: true });
}

// Function to process all train data files
async function generateTrainSummary() {
  try {
    // Read all files in the directory
    const files = fs.readdirSync(trainDataDir);
    const jsFiles = files.filter(file => file.endsWith('.js'));
    
    const trainDataSummary = [];
    
    // Process each JavaScript file
    for (const file of jsFiles) {
      const filePath = path.join(trainDataDir, file);
      
      try {
        // Read and evaluate the file content
        const fileContent = fs.readFileSync(filePath, 'utf-8');
        
        // Extract the trainData object using a regular expression
        const trainDataMatch = fileContent.match(/export\s+const\s+trainData\s*=\s*({[\s\S]*?});/);
        if (!trainDataMatch) {
          console.error(` Could not find trainData in ${file}`);
          continue;
        }
        
        // Evaluate the trainData object
        const trainData = eval(`(${trainDataMatch[1]})`);
        
        // Extract the train information
        const name = path.basename(file, '.js').replace(/_/g, ' ');
        const forwardPath = trainData.forward?.path || '';
        const forwardTrainNumber = trainData.forward?.train_number?.toString() || '';
        const reversePath = trainData.reverse?.path || '';
        const reverseTrainNumber = trainData.reverse?.train_number?.toString() || '';
        
        // Add to summary
        trainDataSummary.push({
          name,
          forwardPath,
          forwardTrainNumber,
          reversePath,
          reverseTrainNumber
        });
        
        console.log(` Processed: ${file}`);
      } catch (error) {
        console.error(` Error processing file ${file}:`, error.message);
      }
    }
    
    // Generate TypeScript file content
    const tsContent = `// This file is auto-generated by step-y-trainDataSummaryForSearch.js
// Do not edit this file manually

export const trainDataSummary = ${JSON.stringify(trainDataSummary, null, 2)} as const;`;
    
    // Write to file
    fs.writeFileSync(outputFile, tsContent, 'utf-8');
    console.log(`\n Successfully generated ${outputFile}`);
    
  } catch (error) {
    console.error(' Error generating train summary:', error.message);
    process.exit(1);
  }
}

// Run the script
generateTrainSummary().catch(console.error);
